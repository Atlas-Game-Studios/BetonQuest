name: Setup version context
description: |
  Setup the version context with a bunch of environment variables based on maven.

inputs:
  ROOT_REPOSITORY:
    description: |
      The root repository name.
    required: true
  GITHUB_TOKEN:
    description: |
      The GitHub token to use for creating the build-number tag.
    required: true

outputs:
  VERSION:
    description: |
      The version of the build.
    value: ${{ steps.save_version.outputs.version }}
  VERSION_TYPE:
    description: |
      The type of the build.
    value: ${{ steps.save_version_type.outputs.VERSION_TYPE }}
  VERSION_MAVEN:
    description: |
      The version of the build in maven format.
    value: ${{ steps.save_version_maven.outputs.version_maven }}
  VERSION_PREVIOUS_TAG:
    description: |
      The previous build-number tag from Development Build.
    value: ${{ steps.save_tag.outputs.version_previous_tag }}
  VERSION_CHANGES_IN_DOCS_ONLY:
    description: |
      Whether the changes are only in the docs folder.
    value: ${{ steps.save_changes.outputs.version_changes_in_docs_only }}

runs:
  using: composite
  steps:
    - uses: ./.github/actions/version/type
      id: save_version_type
      with:
        ROOT_REPOSITORY: ${{ inputs.ROOT_REPOSITORY }}
    - name: Read revision version from pom.xml
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        MAVEN_POM_REVISION_VERSION="$(mvn help:evaluate -Dexpression=revision -q -DforceStdout)"
        echo "MAVEN_POM_REVISION_VERSION=$MAVEN_POM_REVISION_VERSION" >> $GITHUB_ENV
    - name: Get the previous build-number tag from Development Build
      id: save_tag
      if: "env.VERSION_TYPE == 'release' || env.VERSION_TYPE == 'development'"
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        VERSION_PREVIOUS_TAG="$(git tag -l ${MAVEN_POM_REVISION_VERSION}-build-number-* | head -n 1)"
        echo "VERSION_PREVIOUS_TAG=$VERSION_PREVIOUS_TAG" >> $GITHUB_ENV
        echo "version_previous_tag=$VERSION_PREVIOUS_TAG" >> $GITHUB_OUTPUT
    - name: Check for difference in docs only
      id: save_changes
      if: "env.VERSION_TYPE == 'development'"
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        DIFF_OUTSIDE="$(git diff --quiet ${VERSION_PREVIOUS_TAG} -- . ':(exclude)docs/' && echo false || echo true)"
        DIFF_INSIDE="$(git diff --quiet ${VERSION_PREVIOUS_TAG} -- docs/ && echo false || echo true)"
        if [[ $DIFF_OUTSIDE == false && $DIFF_INSIDE == true ]]; then VERSION_CHANGES_IN_DOCS_ONLY=true; else VERSION_CHANGES_IN_DOCS_ONLY=false; fi
        echo "VERSION_CHANGES_IN_DOCS_ONLY=$VERSION_CHANGES_IN_DOCS_ONLY" >> $GITHUB_ENV
        echo "version_changes_in_docs_only=$VERSION_CHANGES_IN_DOCS_ONLY" >> $GITHUB_OUTPUT
    - name: Generate build number for Development Build
      if: "env.VERSION_TYPE == 'development' && env.VERSION_CHANGES_IN_DOCS_ONLY == 'false'"
      uses: onyxmueller/build-tag-number@v1.0.3
      with:
        token: ${{ inputs.GITHUB_TOKEN }}
        prefix: ${{ env.MAVEN_POM_REVISION_VERSION }}
    - name: Set version for 'Release Build'
      if: "env.VERSION_TYPE == 'release'"
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        TAG_VERSION="${GITHUB_REF#*/*/}"
        echo "Collected the tag version. The version is '$TAG_VERSION'"
        if [ ${TAG_VERSION:1} != $MAVEN_POM_REVISION_VERSION ]; then echo "::error::The version of the tag and the version of the pom are not equal! Tag is '$TAG_VERSION' and pom is '$MAVEN_POM_REVISION_VERSION'."; exit 1; fi
        echo "VERSION_MAVEN=$MAVEN_POM_REVISION_VERSION" >> $GITHUB_ENV
        echo "VERSION=$MAVEN_POM_REVISION_VERSION" >> $GITHUB_ENV
    - name: Set version for 'Development Build'
      if: "env.VERSION_TYPE == 'development'"
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        echo "VERSION_MAVEN=${MAVEN_POM_REVISION_VERSION}-SNAPSHOT" >> $GITHUB_ENV
        if [ $VERSION_CHANGES_IN_DOCS_ONLY == true ]; then VERSION=${VERSION_PREVIOUS_TAG/build-number/DEV}; else VERSION=${MAVEN_POM_REVISION_VERSION}-DEV-${BUILD_NUMBER}; fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    - name: Set version for 'Artifact Build'
      if: "env.VERSION_TYPE == 'artifact'"
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        if [ ${{ github.repository }} != inputs.ROOT_REPOSITORY ]; then REPO=${{ github.repository }}-; fi
        echo "VERSION_MAVEN=${MAVEN_POM_REVISION_VERSION}-DEV-UNOFFICIAL" >> $GITHUB_ENV
        VERSION=${MAVEN_POM_REVISION_VERSION}-DEV-ARTIFACT-${REPO}${{ github.run_number }}
        echo "VERSION=$VERSION" >> $GITHUB_ENV
    - name: Save version to output variable
      id: save_version
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        echo "version=$VERSION" >> $GITHUB_OUTPUT
    - name: Save version maven format to output variable
      id: save_version_maven
      shell: bash --noprofile --norc -euo pipefail {0}
      run: |
        echo "version_maven=$VERSION_MAVEN" >> $GITHUB_OUTPUT
