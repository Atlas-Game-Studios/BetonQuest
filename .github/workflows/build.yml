name: Build
on: [ push, pull_request ]

jobs:
  prepare:
    name: Prepare Build Variables
    runs-on: ubuntu-latest

    outputs:
      VERSION: ${{ steps.version.outputs.version }}
      VERSION_TYPE: ${{ steps.version.outputs.version_type }}
      VERSION_MAVEN: ${{ steps.version.outputs.version_maven }}
      PREVIOUS_VERSION_TAG: ${{ steps.version.outputs.previous_version_tag }}
      CHANGES_IN_DOCS_ONLY: ${{ steps.version.outputs.changes_in_docs_only }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: ./.github/actions/version
        with:
          ROOT_REPOSITORY: BetonQuest/BetonQuest
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Save version to output variable
        id: version
        run: |
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_type=$VERSION_TYPE" >> $GITHUB_OUTPUT
          echo "version_maven=$VERSION_MAVEN" >> $GITHUB_OUTPUT
          echo "previous_version_tag=$PREVIOUS_VERSION_TAG" >> $GITHUB_OUTPUT
          echo "changes_in_docs_only=$CHANGES_IN_DOCS_ONLY" >> $GITHUB_OUTPUT

  build-code:
    name: Build Code
    needs: [ prepare ]
    runs-on: ubuntu-latest

    env:
      VERSION: ${{ needs.prepare.outputs.VERSION }}
      VERSION_TYPE: ${{ needs.prepare.outputs.VERSION_TYPE }}
      VERSION_MAVEN: ${{ needs.prepare.outputs.VERSION_MAVEN }}
      PREVIOUS_VERSION_TAG: ${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}
      CHANGES_IN_DOCS_ONLY: ${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java-maven
        with:
          JAVA_CACHE: 'maven'
          MAVEN_TARGET_DIR: 'target/artifacts'
      - uses: ./.github/actions/replace-code-variables
        with:
          VERSION: ${{ env.VERSION }}
          VERSION_TYPE: ${{ env.VERSION_TYPE }}
      - name: Build with Maven. Phase 'verify'
        run: |
          if [ $VERSION_TYPE == 'release' ]; then CHANGELIST=-Dchangelist=; fi
          mvn $CHANGELIST -P Test-All -B verify
          git diff > target/artifacts/changes.patch
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: BetonQuest-Artifacts
          path: |
            target/artifacts/BetonQuest.jar
            target/artifacts/betonquest-*-*.jar

  build-docs:
    name: Build Docs
    needs: [ prepare ]
    runs-on: ubuntu-latest

    env:
      VERSION: ${{ needs.prepare.outputs.VERSION }}
      VERSION_TYPE: ${{ needs.prepare.outputs.VERSION_TYPE }}
      VERSION_MAVEN: ${{ needs.prepare.outputs.VERSION_MAVEN }}
      PREVIOUS_VERSION_TAG: ${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}
      CHANGES_IN_DOCS_ONLY: ${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          submodules: ${{ env.VERSION_TYPE == 'release' || env.VERSION_TYPE == 'development' }}
      - uses: ./.github/actions/setup-git-lfs
      - uses: ./.github/actions/setup-mkdocs-material
        with:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
          MKDOCS_SITE_DIR: 'target/docs'
          PYTHON_CACHE: 'pip'
          PYTHON_CACHE_DEPENDENCY_PATH: 'config/setup-docs-dependencies.py'
      - uses: ./.github/actions/replace-docs-variables
        with:
          VERSION: ${{ env.VERSION }}
          VERSION_TYPE: ${{ env.VERSION_TYPE }}
          VERSION_MAVEN: ${{ env.VERSION_MAVEN }}
          REPOSITORY_URL: ${{ vars.REPOSITORY_URL }}
      - name: Build with mkdocs
        run: |
          mkdocs build 
          git diff > target/docs/changes.patch
        env:
          MKDOCS_MATERIAL_INSIDERS_ENABLED: ${{ secrets.MKDOCS_MATERIAL_INSIDERS != '' }}
          MKDOCS_MATERIAL_INSIDERS_ENABLED_CI: ${{ secrets.MKDOCS_MATERIAL_INSIDERS != '' }}
      - name: Upload Docs
        uses: actions/upload-artifact@v4
        with:
          name: BetonQuest-Docs
          path: |
            target/docs/
            !target/docs/changes.patch

  deploy-code:
    name: Deploy Code
    if: "needs.prepare.outputs.VERSION_TYPE == 'release' || needs.prepare.outputs.VERSION_TYPE == 'development' && needs.prepare.outputs.CHANGES_IN_DOCS_ONLY == 'false'"
    needs: [ prepare, build-code, build-docs ]
    runs-on: ubuntu-latest

    env:
      VERSION: ${{ needs.prepare.outputs.VERSION }}
      VERSION_TYPE: ${{ needs.prepare.outputs.VERSION_TYPE }}
      VERSION_MAVEN: ${{ needs.prepare.outputs.VERSION_MAVEN }}
      PREVIOUS_VERSION_TAG: ${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}
      CHANGES_IN_DOCS_ONLY: ${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}

    outputs:
      UPLOAD_PATH: ${{ steps.save_upload_path.outputs.upload_path }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java-maven
        with:
          JAVA_CACHE: 'maven'
          MAVEN_TARGET_DIR: 'target/artifacts'
      - name: Load patch file
        run: |
          git apply target/artifacts/changes.patch
          rm target/artifacts/changes.patch
      - uses: ./.github/actions/maven-mirror
        with:
          REPOSITORY_ID: betonquest
          REPOSITORY_USER: ${{ secrets.REPOSITORY_USER }}
          REPOSITORY_PASS: ${{ secrets.REPOSITORY_PASS }}
      - name: Publish to Maven Repository
        run: |
          if [ $VERSION_TYPE == 'release' ]; then CHANGELIST=-Dchangelist=; fi
          mvn $CHANGELIST -P Skip-Verification,Test-None -B deploy | tee maven-deploy.log
        env:
          REPOSITORY_URL: ${{ vars.REPOSITORY_URL }}
          REPOSITORY_USER: ${{ secrets.REPOSITORY_USER }}
          REPOSITORY_PASS: ${{ secrets.REPOSITORY_PASS }}
      - name: Get upload URL from deploy log
        id: save_upload_path
        run: |
          UPLOAD_PATH="$(grep -oP "(?<=Uploading to betonquest: $REPOSITORY_URL).*-shaded.jar" maven-deploy.log)"
          echo "upload_path=$UPLOAD_PATH" >> $GITHUB_OUTPUT
        env:
          REPOSITORY_URL: ${{ vars.REPOSITORY_URL }}

  deploy-docs:
    name: Deploy Docs
    concurrency: gh-pages-deploy
    if: "needs.prepare.outputs.VERSION_TYPE == 'release' || needs.prepare.outputs.VERSION_TYPE == 'development'"
    needs: [ prepare, build-code, build-docs ]
    runs-on: ubuntu-latest

    env:
      VERSION: ${{ needs.prepare.outputs.VERSION }}
      VERSION_TYPE: ${{ needs.prepare.outputs.VERSION_TYPE }}
      VERSION_MAVEN: ${{ needs.prepare.outputs.VERSION_MAVEN }}
      PREVIOUS_VERSION_TAG: ${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}
      CHANGES_IN_DOCS_ONLY: ${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: ${{ env.VERSION_TYPE == 'release' }}
          token: ${{ secrets.ALL_REPOSITORIES_ACCESS_TOKEN }}
      - uses: ./.github/actions/setup-git-lfs
      - uses: ./.github/actions/setup-mkdocs-material
        with:
          MKDOCS_MATERIAL_INSIDERS: ${{ secrets.MKDOCS_MATERIAL_INSIDERS }}
          MKDOCS_SITE_DIR: 'target/docs'
          PYTHON_CACHE: 'pip'
          PYTHON_CACHE_DEPENDENCY_PATH: 'config/setup-docs-dependencies.py'
      - name: Load patch file
        run: |
          git apply target/docs/changes.patch
          rm target/docs/changes.patch
      - name: Deploy to Github Pages
        if: "env.VERSION_TYPE == 'release' || env.VERSION_TYPE == 'development'"
        run: |
          git config --global user.name "BetonQuest-Bot"
          git config --global user.email "contact@betonquest.org"
          
          IFS='.' read -r major minor _ <<< "$VERSION"
          TWO_DIGIT_VERSION="$major.$minor"
          
          FLAGS=(--push --update-aliases)
          VERSION=()
          if [ "$TXT" = "docs-requirements-insiders.txt" ]; then FLAGS+=(--config-file mkdocs.insiders.yml); fi
          if [ "$VERSION_TYPE" = release ]; then
            VERSION+=("$TWO_DIGIT_VERSION" "$TWO_DIGIT_VERSION-DEV")
            if [ $(git branch --contains tags/v${VERSION} | grep '^\* main$') ] || { mike list --json "$TWO_DIGIT_VERSION" | grep -q '"aliases" *: *\[[^]]*"RELEASE"'; }; then
              VERSION+=(RELEASE)
            fi
          elif [ "$VERSION_TYPE" = development ]; then
            VERSION+=("$TWO_DIGIT_VERSION-DEV")
            if ! { mike list --json | grep -q "\"version\" *: *\"$TWO_DIGIT_VERSION\""; }; then
              VERSION+=("$TWO_DIGIT_VERSION")
            fi
          fi
          
          if [ ${{ github.ref }} == 'refs/heads/main' ]; then VERSION+=(DEV); fi
          
          if [ "$VERSION_TYPE" = release ]; then
            mike delete "$TWO_DIGIT_VERSION-DEV"
          fi
          mike deploy "${FLAGS[@]}" "${VERSION[@]}"
        env:
          MKDOCS_MATERIAL_INSIDERS_ENABLED: ${{ secrets.MKDOCS_MATERIAL_INSIDERS != '' }}
          MKDOCS_MATERIAL_INSIDERS_ENABLED_CI: ${{ secrets.MKDOCS_MATERIAL_INSIDERS != '' }}
      - name: Set version Tag for Quest-Tutorials submodule
        if: "env.VERSION_TYPE == 'release'"
        run: |
          git config --global user.name "BetonQuest-Bot"
          git config --global user.email "contact@betonquest.org"
          
          cd docs/_tutorials/
          git tag "v$VERSION"
          git push origin "v$VERSION"

  create-release:
    name: Create GitHub Release
    if: "needs.prepare.outputs.VERSION_TYPE == 'release' && needs.deploy-code.result == 'success' && needs.deploy-docs.result == 'success'"
    needs: [ prepare, deploy-code, deploy-docs ]
    runs-on: ubuntu-latest

    env:
      VERSION: ${{ needs.prepare.outputs.VERSION }}
      VERSION_TYPE: ${{ needs.prepare.outputs.VERSION_TYPE }}
      VERSION_MAVEN: ${{ needs.prepare.outputs.VERSION_MAVEN }}
      PREVIOUS_VERSION_TAG: ${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}
      CHANGES_IN_DOCS_ONLY: ${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - uses: ./.github/actions/setup-java-maven/cache
        with:
          MAVEN_TARGET_DIR: 'target/artifacts'
      - uses: ./.github/actions/setup-mkdocs-material/cache
        with:
          MKDOCS_SITE_DIR: 'target/docs'
      - name: Zip Docs
        run: |
          zip -r target/docs/Docs.zip target/docs/
      - name: Set CHANGELOG.md version
        run: |
          sed -i "s~## \[Unreleased\]~## \[${VERSION}\]~g" ./CHANGELOG.md
          DATE="$(date +%Y-%m-%d)"
          sed -i "s~\${maven\.build\.timestamp}~$DATE~g" ./CHANGELOG.md
      - name: Create release
        uses: docker://antonyurchenko/git-release:v6
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DRAFT_RELEASE: false
          PRE_RELEASE: false
          CHANGELOG_FILE: CHANGELOG.md
          RELEASE_NAME: BetonQuest ${{ env.VERSION }}
        with:
          args: |
            target/artifacts/BetonQuest.jar
            target/docs/Docs.zip
      - name: Delete obsolete git tag
        run: |
          git push origin :${PREVIOUS_VERSION_TAG}

  discord-announcement:
    name: Official Deployment
    if: "always() && !cancelled() && ( needs.prepare.outputs.VERSION_TYPE == 'release' || needs.prepare.outputs.VERSION_TYPE == 'development' && ( needs.prepare.outputs.CHANGES_IN_DOCS_ONLY == 'false' || failure() ) )"
    needs: [ prepare, deploy-code, deploy-docs, create-release ]
    runs-on: ubuntu-latest

    env:
      VERSION: ${{ needs.prepare.outputs.VERSION }}
      VERSION_TYPE: ${{ needs.prepare.outputs.VERSION_TYPE }}
      VERSION_MAVEN: ${{ needs.prepare.outputs.VERSION_MAVEN }}
      PREVIOUS_VERSION_TAG: ${{ needs.prepare.outputs.PREVIOUS_VERSION_TAG }}
      CHANGES_IN_DOCS_ONLY: ${{ needs.prepare.outputs.CHANGES_IN_DOCS_ONLY }}

    steps:
      - name: Checkout source code
        uses: actions/checkout@v4
      - name: Set NEEDED_JOB_STATES
        if: always() && !cancelled()
        run: |
          if [[ "${{ needs.prepare.result }}" == "failure" || "${{ needs.deploy-code.result }}" == "failure" || "${{ needs.deploy-docs.result }}" == "failure" || "${{ needs.create-release.result }}" == "failure" ]]; then
            echo "NEEDED_JOB_STATES=failure" >> $GITHUB_ENV
          else
            echo "NEEDED_JOB_STATES=success" >> $GITHUB_ENV
          fi
      - name: Publish to Discord
        if: "always() && !cancelled()"
        run: |
          bash .github/scripts/discord.sh
        env:
          JOB_STATUS: ${{ env.NEEDED_JOB_STATES }}
          WEBHOOK_URL: ${{ secrets.WEBHOOK_URL }}
          DOCS_URL: ${{ vars.DOCS_URL }}
          UPLOAD_PATH: ${{ needs.deploy-code.outputs.UPLOAD_PATH }}
